/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) return null;
        Node curr = head;
        while (curr != null) {
            Node currCopy = new Node(curr.val);
            currCopy.next = curr.next;
            curr.next = currCopy;
            curr = currCopy.next;
        }
        curr = head;
        while (curr != null ) {
            if (curr.random != null)
                curr.next.random = curr.random.next;
            else curr.next.random = null;
            curr = curr.next.next;
        }
        curr = head;
        Node newHead = head.next;
        while (curr != null && curr.next != null) {
            Node tmp = curr.next;
            curr.next = tmp.next;
            curr = tmp;            
        }
        return newHead;
    }
}
//solution 2
class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) return null;
        Node curr = head;
        Map<Node, Node> map = new HashMap();
        while (curr != null) {
            Node n = new Node(curr.val);
            map.put(curr, n);
            curr = curr.next;
        }
        curr = head;
        Node newCurr = map.get(head);
        while(curr != null){
            newCurr.next = map.get(curr.next);
            newCurr.random = map.get(curr.random);
            curr = curr.next;
            newCurr = newCurr.next;
        }
        return map.get(head);
    }
}
