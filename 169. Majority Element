class Solution {
    public int majorityElement(int[] nums) {
        Map<Integer, Integer> map = new HashMap();
        for (int i : nums) {
            map.put(i, map.getOrDefault(i,0) + 1);
        }
        Map.Entry<Integer, Integer> ans = null;
        for(Map.Entry<Integer, Integer> i : map.entrySet()) {
            if (i.getValue() > nums.length / 2) {
                ans = i;
            }
        }
       return ans.getKey();
    }
}
//solution 2
class Solution {
    public int majorityElement(int[] nums) {
        if(nums.length == 1) return nums[0];
        Arrays.sort(nums);
        int cnt = 1, ans = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i - 1] == nums[i]) {
                cnt++;
                ans = nums[i];
            } else {
                if (cnt > nums.length / 2) {
                    break;
                } else {
                    cnt = 1;
                }
            }
        }
        return ans;
    }
}

//solution 3
class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length / 2];
    }
}
