/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null) return true;
        //find mid point
        ListNode s = head, f = head;
        while(f != null && f.next != null) {
            s = s.next;
            f = f.next.next;
        }
        //reverse the 2nd half of the list
        if(f != null) s = s.next;
        s = reverse(s);
        //compare the 2nd half with the 1st half
        while(s != null) {
            if(s.val != head.val) return false;
            s = s.next;
            head = head.next;
        }
        return true;
    }
    
    private ListNode reverse(ListNode head) {
        ListNode prev = null, curr = head;
        while(head != null) {
            curr = head.next;
            head.next = prev;
            prev = head;
            head = curr;
        }
        return prev;
    }
}
