//solution 1
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length()==0) return 0;
        int[] dp = new int[s.length() + 1];//longest substring for first i char
        dp[0] = 0;
        dp[1] = 1;
        for(int i = 2; i <= s.length(); i++){
            Set<Character> set = new HashSet();            
            int len = dp[i - 1];
            for(char c: s.substring(i - len - 1, i).toCharArray()){
                if(!set.add(c)){
                    dp[i] = dp[i - 1];
                    break;
                }
            }
            if(set.size() > dp[i - 1]){
                dp[i] = dp[i - 1] + 1;
            }
        }
        return dp[s.length()];
    }
}

//solution 2
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        if(n == 0) return 0;
        HashMap<Character, Integer> map = new HashMap();
        int i = 0, j = 0, maxLen = 0;
        while(i < n && j < n){
            if(!map.containsKey(s.charAt(j)) || map.containsKey(s.charAt(j)) && map.get(s.charAt(j)) < i){
                map.put(s.charAt(j), j);
                maxLen = Math.max(maxLen, j - i + 1);
                j++;                
            } else {
                i = map.get(s.charAt(j)) + 1;
                map.put(s.charAt(j), j);
                j++;
            }
        }
        return maxLen;
    }
}
