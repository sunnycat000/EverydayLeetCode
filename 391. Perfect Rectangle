class Solution {
    public boolean isRectangleCover(int[][] rectangles) {
        if (rectangles.length <= 1) {
            return true;
        }
        Arrays.sort(rectangles, (a, b) -> Integer.compare(a[0], b[0]));
        int colMin = rectangles[0][0];
        Arrays.sort(rectangles, (a, b) -> Integer.compare(a[1], b[1]));
        int rowMin = rectangles[0][1];
        Arrays.sort(rectangles, (a, b) -> Integer.compare(a[2], b[2]));
        int colMax = rectangles[rectangles.length - 1][2];
        Arrays.sort(rectangles, (a, b) -> Integer.compare(a[3], b[3]));
        int rowMax = rectangles[rectangles.length - 1][3];
        TreeSet<String> set = new TreeSet<>();
        int area = 0;
        for (int[] rec: rectangles) {
            String[] points = new String[4];
            points[0] = rec[0] + "," + rec[1];
            points[1] = rec[2] + "," + rec[3]; 
            points[2] = rec[0] + "," + rec[3];
            points[3] = rec[2] + "," + rec[1];
            for (String point: points){
                if(set.contains(point)){
                    set.remove(point);
                } else {
                    set.add(point);
                }
            }
            area += (rec[2] - rec[0]) * (rec[3] - rec[1]);
        }
        if (set.size() == 4 && area == (rowMax - rowMin) * (colMax - colMin) &&set.contains(colMin + "," + rowMin) && set.contains(colMin + "," + rowMax) && set.contains(colMax + "," + rowMin) && set.contains(colMax + "," + rowMax)) {
            return true;
        }
        return false;
    }
}
