//solution1
class Solution {
    public int jump(int[] nums) {
        int n = nums.length;
        if(n <= 1) {
            return 0;
        }
        int[] dp = new int[n];
        dp[0] = 0;
        for(int i = 1; i < n; i++) {
            dp[i] = Integer.MAX_VALUE;
            for(int j = 0; j < i; j++) {
                if(j + nums[j]>= i) {
                    dp[i] = Math.min(dp[j] + 1, dp[i]);
                }
            }
        }
        return dp[n - 1];
    }
}

//solution 2
class Solution {
    public int jump(int[] nums) {
        int n = nums.length;
        if(n <= 1) {
            return 0;
        }
        int far = 0, crr = 0, cnt = 0;
        while(far < n - 1) {
            cnt++;
            int currFar = far;
            for (; crr <= currFar; crr++) {
                far = Math.max(far, crr + nums[crr]);
            }            
        }
        return cnt;
    }
}
