//solution 1
class Solution {
    public void rotate(int[][] matrix) {
        int tmp, n = matrix.length;
        for(int i = 0; i < n / 2; i++){
            for(int j = i; j < n - i - 1; j++){
                tmp = matrix[n - j - 1][i];
                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];
                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];
                matrix[j][n - i - 1] = matrix[i][j];
                matrix[i][j] = tmp;
            }
        }
        
    }
}

//solution2:
class Solution {
    public void rotate(int[][] matrix) {
        int tmp, n = matrix.length;
        for(int i = 0; i < n - 1; i++){
            for(int j = 0; j < n - i; j++){
                tmp = matrix[n - j - 1][n - i - 1];
                matrix[n - j - 1][n - i - 1] = matrix[i][j];
                matrix[i][j] = tmp;
            }
        }
        
        for(int i = 0; i < n / 2; i++){
            int[] tmpArr = matrix[n - 1 - i];
            matrix[n - 1 - i] = matrix[i];
            matrix[i] = tmpArr;          
        }
    }
}
//solution 3:
class Solution {
    public void rotate(int[][] matrix) {
        int tmp, n = matrix.length;
        for(int i = 0; i < n - 1; i++){
            for(int j = i + 1; j < n; j++){
                tmp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = tmp;
            }
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n / 2; j++){
                tmp = matrix[i][j];
                matrix[i][j] = matrix[i][n - 1 - j];
                matrix[i][n - 1 - j] = tmp;
            }
        }
    }

}
