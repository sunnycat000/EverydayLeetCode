//solution 1
class Solution {
    public int maxSubArray(int[] nums) {
        int[] dp = new int[nums.length];//dp[i] is the largest subarray end with nums[i]
        dp[0] = nums[0];
        int res = dp[0];
        for(int i = 1; i < nums.length; i++){
            dp[i] = dp[i - 1] + nums[i] > nums[i]? dp[i - 1] + nums[i]: nums[i];
            res = Math.max(dp[i], res);
        }
        return res;
    }
}

//solution 2
class Solution {
    public int maxSubArray(int[] nums) {
        if(nums.length == 0) return 0;
        return subMax(nums, 0, nums.length - 1);
    }
    public int subMax(int[] nums, int left, int right){
        if(left >= right) return nums[left];
        int mid = (left + right) / 2;
        int leftMax = subMax(nums, left, mid);
        int rightMax = subMax(nums, mid + 1, right);
        int midRunningTotalR= 0, midRunningTotalL= 0, midMaxR = nums[mid + 1],midMaxL = nums[mid];
        for(int i = mid + 1; i <= right; i++){
            midRunningTotalR += nums[i];
            midMaxR = Math.max(midMaxR, midRunningTotalR);
        }
        for(int i = mid; i >= left; i--){
            midRunningTotalL += nums[i];
            midMaxL = Math.max(midMaxL, midRunningTotalL);
        }
        return Math.max(Math.max(leftMax, rightMax), midMaxR + midMaxL);
    }

}
