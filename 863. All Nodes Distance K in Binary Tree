/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    Map<TreeNode, List<TreeNode>> map = new HashMap();
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        List<Integer> ans = new ArrayList();
        Set<TreeNode> visited = new HashSet();
        Queue<TreeNode> q = new LinkedList();
        makeMap(root, null);
        q.add(target);
        visited.add(target);
        while(!q.isEmpty()){
            int size = q.size();
            if(K == 0) {
                for(int i = 0; i < size; i++) {
                    ans.add(q.poll().val);
                }
                return ans;
            }
            for(int i = 0; i < size; i++) {
                TreeNode node = q.poll();
                for(TreeNode n: map.get(node)){
                    if(visited.contains(n)) continue;
                    visited.add(n);
                    q.add(n);
                }
            }
            K--;
        }
        return ans;
    }
    
    private void makeMap(TreeNode node, TreeNode parent){
        if(node == null) return;
        if(!map.containsKey(node)){
            map.put(node, new ArrayList<TreeNode>());
            if(parent != null) {
                map.get(node).add(parent);
                map.get(parent).add(node);
            }
            makeMap(node.left, node);
            makeMap(node.right, node);
        }        
    }
}

//solution 2
class Solution {
    List<Integer> ans;
    TreeNode target;
    int K;
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        ans = new ArrayList();
        this.target = target;
        this.K = K;
        dfs(root);
        return ans;        
    }
    private int dfs(TreeNode root){
        if(root == null) {
            return -1;
        } else if (root == target) {
            addSubtree(root, 0);
            return 1;
        } else {
            int L = dfs(root.left);
            int R = dfs(root.right);
            if (L != -1) {
                if(L == K) ans.add(root.val);
                addSubtree(root.right, L + 1);
                return L + 1;
            } else if (R != -1 ){
                if(R == K) ans.add(root.val);
                addSubtree(root.left, R + 1);
                return R + 1;
            } else {
                return -1;
            }
        }
        
    }
    
    private void addSubtree(TreeNode node, int dist){
        if(node == null) return;
        if(dist == K) {
            ans.add(node.val);
        } else {
            addSubtree(node.left, dist + 1);
            addSubtree(node.right, dist + 1);
        }        
    }
}
